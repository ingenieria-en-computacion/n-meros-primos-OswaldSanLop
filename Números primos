section .data
  msg db "el numero es primo", 0
  msg2 db "el numero no es primo", 0
section .text
  global_start
  %include "io.asm"
_start:
  call scan_num    ;leer el número
  push eax         ;Guardar el número en la pila

  call print_num     ;mostrar el número ingresado
  call check_primo   ;Verificar si es primo

  cmp eax, 1       ;Evaluar el resultado
  je .es_primo     ;Saltar si es primo

  mov esi, msg2      ;Preparar el mensaje "no es primo"
  jmp .print_result  ;Saltar soi es primo

.es_primo:
  mov esi, msg

.print_result:
  call print_str
  call print_newline

  jmp .fin

;Verifica si es un número es primo
;Entrada: número en la pila (push eax antes de llamar)
;Salida: eax = 1 si es primo, 0 si no lo es
;modifica: eax, ebx, ecx, edx

check_primo:
  push ebp
  mov ebp, esp
  push ebx
  push ecx
  push edx
  mov ebx, [ebp + 8] ; recuperar el número de la pila

  ;casos especiales, numeros menores o iguales a 1 no son primos
  cmp ebx, 1
  jle .no_primo

  ;el 2 es primo
  cmp ebx, 2
  je .prime

  ;todos los pares mayores a 2 no son primos
  mov eax, ebx
  and eax, 1      ;Bit menos significativo
  cmp eax, 0      ;podría usarse test ebx, 1
  je .no_primo

  mov ecx, 3      ; coprobar divisores impares desde 3 hasta n, ecx = divisor actual

.while:
  ;Calcular ecx*ecx(para comparar con ebx)
  mov eax, ecx
  mul ecx
  cmp eax, ebx
  ja .primo    ;Si ecx > ebx, termina

  ;Verificar si ebx es divisible por ecx
  mov eax, ebx
  xor edx, edx
  div ecx

  cmp edx, 0
  je .no_primo ; si el residuo es 0, no es primo

  ;Siguiente divisor impar
  add ecx, 2
  jmp .while;

.primo:
  mov eax, 1
  jmp .fin_check

.no_primo:
  xor eax, eax

.fin_check:
  pop edx
  pop ecx
  pop ebx
  mov esp, ebp
  pop ebp
  ret 4

.fin:
  mov eax, 1
  mov ebx, 0
  int 0x80
